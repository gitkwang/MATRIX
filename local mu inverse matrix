#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#define MAX_NNZ 3000000
static const int edge_lookup[6][2] = {
    {0, 1}, {0, 2}, {0, 3},
    {1, 2}, {1, 3}, {2, 3}
};
static const double PI = 3.14159265358979323846;
static const double mu0 = 4.0 * PI * 1e-7;

typedef struct {
    int row;
    int col;
    double value;
} SparseEntry;


// 벡터 내적
static inline double dot3(const double* a, const double* b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

// 3D 벡터 외적
void cross3(const double* a, const double* b, double* out) {
    out[0] = a[1] * b[2] - a[2] * b[1];
    out[1] = a[2] * b[0] - a[0] * b[2];
    out[2] = a[0] * b[1] - a[1] * b[0];
}


static void det_inv_4x4(const double X[4][4], double* det_out, double invX[4][4]) {
    double A[4][8];
    for (int i = 0; i < 4; i++) {
        memcpy(A[i], X[i], 4 * sizeof(double));
        for (int j = 0; j < 4; j++) A[i][j + 4] = (i == j) ? 1.0 : 0.0;
    }
    double det = 1.0;
    for (int i = 0; i < 4; i++) {
        int piv = i;
        for (int r = i + 1; r < 4; r++)
            if (fabs(A[r][i]) > fabs(A[piv][i])) piv = r;
        if (piv != i) {
            for (int c = 0; c < 8; c++) { double tmp = A[i][c]; A[i][c] = A[piv][c]; A[piv][c] = tmp; }
            det = -det;
        }
        double d = A[i][i];
        det *= d;
        for (int c = 0; c < 8; c++) A[i][c] /= d;
        for (int r = 0; r < 4; r++) if (r != i) {
            double f = A[r][i];
            for (int c = 0; c < 8; c++) A[r][c] -= f * A[i][c];
        }
    }
    *det_out = det;
    for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) invX[i][j] = A[i][j + 4];
}
// 2-form용: i, j에 face index를 사용 (ex: global face index)
void add_sparse(SparseEntry* S, int* nnz, int i, int j, double value) {
    for (int idx = 0; idx < *nnz; idx++) {
        if (S[idx].row == i && S[idx].col == j) {
            S[idx].value += value;
            return;
        }
    }
    if (*nnz < MAX_NNZ) {
        S[*nnz].row = i;
        S[*nnz].col = j;
        S[*nnz].value = value;
        (*nnz)++;
    }
    else {
        printf("Sparse array overflow!\n");
        exit(1);
    }
}

double find_sparse(SparseEntry* S, int nnz, int i, int j) {
    for (int idx = 0; idx < nnz; idx++) {
        if (S[idx].row == i && S[idx].col == j)
            return S[idx].value;
    }
    return 0.0;
}

int main() {
    // ==== 1. 파일 입력 ====
    FILE* fp;
    int N0, N3;
    double* nod_crdn = NULL;
    int* ele_nod = NULL;
    int* ele_edg = NULL;
    // element 최대 100개

   // === nod_crdn.txt ===
    fp = fopen("C:/Users/owner/source/repos/Project5/nod_crdn.txt", "r");
    if (!fp) { perror("nod_crdn.txt"); return 1; }
    if (fscanf(fp, "%d", &N0) != 1) { fprintf(stderr, "Failed to read node count\n"); fclose(fp); return 1; }
    nod_crdn = (double*)malloc(3 * N0 * sizeof(double));
    if (!nod_crdn) { fprintf(stderr, "Memory allocation error\n"); fclose(fp); return 1; }
    for (int i = 0; i < N0; i++) {
        if (fscanf(fp, "%lf %lf %lf", &nod_crdn[3 * i], &nod_crdn[3 * i + 1], &nod_crdn[3 * i + 2]) != 3) {
            fprintf(stderr, "Failed to read node %d\n", i);
            free(nod_crdn); fclose(fp); return 1;
        }
    }
    fclose(fp);

    fp = fopen("C:/Users/owner/source/repos/Project5/ele_edg.txt", "r");
    if (!fp) { perror("ele_edg.txt"); return 1; }
    if (fscanf(fp, "%d", &N3) != 1) { fprintf(stderr, "Failed to read element count\n"); fclose(fp); return 1; }
    ele_edg = (int*)malloc(6 * N3 * sizeof(int));
    if (!ele_edg) {
        fprintf(stderr, "Memory allocation error\n");
        fclose(fp);
        return 1;
    }
    for (int k = 0; k < N3; k++) {
        if (fscanf(fp, "%d %d %d %d %d %d", &ele_edg[6 * k], &ele_edg[6 * k + 1], &ele_edg[6 * k + 2], &ele_edg[6 * k + 3], &ele_edg[6 * k + 4], &ele_edg[6 * k + 5]) != 6) {
            fprintf(stderr, "Failed to read element %d\n", k); free(ele_edg); fclose(fp); return 1;
        }
    }
    fclose(fp);

    fp = fopen("C:/Users/owner/source/repos/Project5/ele_nod.txt", "r");
    if (!fp) { perror("ele_nod.txt"); free(nod_crdn); return 1; }
    if (fscanf(fp, "%d", &N3) != 1) { fprintf(stderr, "Failed to read element count\n"); fclose(fp); free(nod_crdn); return 1; }
    ele_nod = (int*)malloc(4 * N3 * sizeof(int));
    if (!ele_nod) { fprintf(stderr, "Memory allocation error\n"); fclose(fp); free(nod_crdn); return 1; }
    for (int k = 0; k < N3; k++) {
        if (fscanf(fp, "%d %d %d %d", &ele_nod[4 * k], &ele_nod[4 * k + 1], &ele_nod[4 * k + 2], &ele_nod[4 * k + 3]) != 4) {
            fprintf(stderr, "Failed to read element %d\n", k);
            free(ele_nod); free(nod_crdn); fclose(fp); return 1;
        }
        ele_nod[4 * k + 0] -= 1;
        ele_nod[4 * k + 1] -= 1;
        ele_nod[4 * k + 2] -= 1;
        ele_nod[4 * k + 3] -= 1;
    }
    fclose(fp);


    // ==== 2. 첫 번째 element local mu-inverse mass matrix 계산 ====
    int elem = 0;
    SparseEntry* S = (SparseEntry*)malloc(MAX_NNZ * sizeof(SparseEntry));
    int nnz = 0;

    double Xmat[4][4], invX[4][4], grads[4][3], det;
    for (int elem = 0; elem < N3; elem++) {
        int* nodes = &ele_nod[4 * elem];

        for (int i = 0; i < 4; i++) {
            Xmat[0][i] = nod_crdn[3 * nodes[i] + 0];
            Xmat[1][i] = nod_crdn[3 * nodes[i] + 1];
            Xmat[2][i] = nod_crdn[3 * nodes[i] + 2];
            Xmat[3][i] = 1.0;

        }
        double invX[4][4], det;
        det_inv_4x4(Xmat, &det, invX);
        double vol = fabs(det) / 6.0;

        double scale = 6.0 * vol / 120.0 / mu0 * 4.0;

        double vec_12[3], vec_13[3], vec_14[3];
        double vec_21[3], vec_23[3], vec_24[3];
        double vec_31[3], vec_32[3], vec_34[3];
        double vec_41[3], vec_42[3], vec_43[3];

        double grad[4][3];
        for (int i = 0; i < 4; i++)
            for (int d = 0; d < 3; d++)
                grad[i][d] = invX[i][d];

        double cross_gg_lambda[4][4][3];
        for (int ii = 0; ii < 4; ii++)
            for (int jj = 0; jj < 4; jj++)
                cross3(grad[ii], grad[jj], cross_gg_lambda[ii][jj]);

        // 필요한 벡터들 (matlab 인덱스와 동일하게)

        for (int d = 0; d < 3; d++) {
            vec_12[d] = cross_gg_lambda[0][1][d];
            vec_13[d] = cross_gg_lambda[0][2][d];
            vec_14[d] = cross_gg_lambda[0][3][d];
            vec_21[d] = cross_gg_lambda[1][0][d];
            vec_23[d] = cross_gg_lambda[1][2][d];
            vec_24[d] = cross_gg_lambda[1][3][d];
            vec_31[d] = cross_gg_lambda[2][0][d];
            vec_32[d] = cross_gg_lambda[2][1][d];
            vec_34[d] = cross_gg_lambda[2][3][d];
            vec_41[d] = cross_gg_lambda[3][0][d];
            vec_42[d] = cross_gg_lambda[3][1][d];
            vec_43[d] = cross_gg_lambda[3][2][d];
        }

        // local mu-inverse mass matrix (4x4)
        double loc_mu_inv[4][4] = { 0 };
        loc_mu_inv[0][0] = 2 * dot3(vec_23, vec_23) + dot3(vec_23, vec_31) + dot3(vec_23, vec_12) + dot3(vec_31, vec_23) + 2 * dot3(vec_31, vec_31) + dot3(vec_31, vec_12) + dot3(vec_12, vec_23) + dot3(vec_12, vec_31) + 2 * dot3(vec_12, vec_12);
        loc_mu_inv[0][1] = 2 * dot3(vec_23, vec_24) + dot3(vec_23, vec_41) + dot3(vec_23, vec_12) + dot3(vec_31, vec_24) + 2 * dot3(vec_31, vec_41) + dot3(vec_31, vec_12) + dot3(vec_12, vec_24) + dot3(vec_12, vec_41) + dot3(vec_12, vec_12);
        loc_mu_inv[0][2] = 2 * dot3(vec_23, vec_34) + dot3(vec_23, vec_41) + dot3(vec_23, vec_13) + dot3(vec_31, vec_34) + dot3(vec_31, vec_41) + dot3(vec_31, vec_13) + dot3(vec_12, vec_34) + 2 * dot3(vec_12, vec_41) + dot3(vec_12, vec_13);
        loc_mu_inv[0][3] = dot3(vec_23, vec_34) + dot3(vec_23, vec_42) + dot3(vec_23, vec_23) + 2 * dot3(vec_31, vec_34) + dot3(vec_31, vec_42) + dot3(vec_31, vec_23) + dot3(vec_12, vec_34) + 2 * dot3(vec_12, vec_42) + dot3(vec_12, vec_23);
        loc_mu_inv[1][0] = loc_mu_inv[0][1];
        loc_mu_inv[1][1] = 2 * dot3(vec_24, vec_24) + dot3(vec_24, vec_41) + dot3(vec_24, vec_12) + dot3(vec_41, vec_24) + 2 * dot3(vec_41, vec_41) + dot3(vec_41, vec_12) + dot3(vec_12, vec_24) + dot3(vec_12, vec_41) + 2 * dot3(vec_12, vec_12);
        loc_mu_inv[1][2] = 2 * dot3(vec_24, vec_34) + dot3(vec_24, vec_41) + dot3(vec_24, vec_13) + dot3(vec_41, vec_34) + dot3(vec_41, vec_41) + dot3(vec_41, vec_13) + dot3(vec_12, vec_34) + dot3(vec_12, vec_41) + 2 * dot3(vec_12, vec_13);
        loc_mu_inv[1][3] = dot3(vec_24, vec_34) + dot3(vec_24, vec_42) + dot3(vec_24, vec_23) + 2 * dot3(vec_41, vec_34) + dot3(vec_41, vec_42) + dot3(vec_41, vec_23) + dot3(vec_12, vec_34) + dot3(vec_12, vec_42) + 2 * dot3(vec_12, vec_23);
        loc_mu_inv[2][0] = loc_mu_inv[0][2];
        loc_mu_inv[2][1] = loc_mu_inv[1][2];
        loc_mu_inv[2][2] = 2 * dot3(vec_34, vec_34) + dot3(vec_34, vec_41) + dot3(vec_34, vec_13) + dot3(vec_41, vec_34) + 2 * dot3(vec_41, vec_41) + dot3(vec_41, vec_13) + dot3(vec_13, vec_34) + dot3(vec_13, vec_41) + 2 * dot3(vec_13, vec_13);
        loc_mu_inv[2][3] = dot3(vec_34, vec_34) + dot3(vec_34, vec_42) + dot3(vec_34, vec_23) + dot3(vec_41, vec_34) + 2 * dot3(vec_41, vec_42) + dot3(vec_41, vec_23) + dot3(vec_13, vec_34) + dot3(vec_13, vec_42) + 2 * dot3(vec_13, vec_23);
        loc_mu_inv[3][0] = loc_mu_inv[0][3];
        loc_mu_inv[3][1] = loc_mu_inv[1][3];
        loc_mu_inv[3][2] = loc_mu_inv[2][3];
        loc_mu_inv[3][3] = 2 * dot3(vec_34, vec_34) + dot3(vec_34, vec_42) + dot3(vec_34, vec_23) + dot3(vec_42, vec_34) + 2 * dot3(vec_42, vec_42) + dot3(vec_42, vec_23) + dot3(vec_23, vec_34) + dot3(vec_23, vec_42) + 2 * dot3(vec_23, vec_23);


        for (int i = 0; i < 4; i++)
            for (int j = 0; j < 4; j++)
                loc_mu_inv[i][j] *= scale;

        // ==== 출력 ====
        if (elem == 0) {
            printf("\n--- Local mass matrix for element %d ---\n", elem + 1);
            for (int p = 0; p < 6; p++) {
                for (int q = 0; q < 6; q++) {
                    printf("% .12e ", loc_mu_inv[p][q]);
                }
                printf("\n");
            }
        }
    }
}
