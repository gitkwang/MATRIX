#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

#define MAX_NNZ 3000000
#define MAX_PEC 50000

static const double PI = 3.14159265358979323846;
static const double eps0 = 1.0 / (36.0 * PI) * 1e-9;

typedef struct {
    int row;
    int col;
    double value;
} SparseEntry;

static void det_inv_4x4(const double X[4][4], double* det_out, double invX[4][4]) {
    double A[4][8];
    for (int i = 0; i < 4; i++) {
        memcpy(A[i], X[i], 4 * sizeof(double));
        for (int j = 0; j < 4; j++) A[i][j + 4] = (i == j) ? 1.0 : 0.0;
    }
    double det = 1.0;
    for (int i = 0; i < 4; i++) {
        int piv = i;
        for (int r = i + 1; r < 4; r++) if (fabs(A[r][i]) > fabs(A[piv][i])) piv = r;
        if (piv != i) {
            for (int c = 0; c < 8; c++) { double tmp = A[i][c]; A[i][c] = A[piv][c]; A[piv][c] = tmp; }
            det = -det;
        }
        double d = A[i][i];
        if (fabs(d) < 1e-16) { fprintf(stderr, "Singular matrix\n"); exit(EXIT_FAILURE); }
        det *= d;
        for (int c = 0; c < 8; c++) A[i][c] /= d;
        for (int r = 0; r < 4; r++) if (r != i) {
            double f = A[r][i];
            for (int c = 0; c < 8; c++) A[r][c] -= f * A[i][c];
        }
    }
    *det_out = det;
    for (int i = 0; i < 4; i++) for (int j = 0; j < 4; j++) invX[i][j] = A[i][j + 4];
}

static inline double dot3(const double* a, const double* b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
}

void add_sparse(SparseEntry* S, int* nnz, int i, int j, double value) {
    for (int idx = 0; idx < *nnz; idx++) {
        if (S[idx].row == i && S[idx].col == j) {
            S[idx].value += value;
            return;
        }
    }
    if (*nnz < MAX_NNZ) {
        S[*nnz].row = i;
        S[*nnz].col = j;
        S[*nnz].value = value;
        (*nnz)++;
    }
    else {
        printf("Sparse array overflow!\n");
        exit(1);
    }
}

// PEC 인덱스면 1, 아니면 0 반환
int is_PEC_edge(int idx, int* pec_idx, int pec_cnt) {
    for (int i = 0; i < pec_cnt; i++) {
        if (pec_idx[i] == idx) return 1;
    }
    return 0;
}

int main(void) {
    FILE* fp;
    int N0, N1, N3;
    double* nod_crdn = NULL;

    int* ele_nod = NULL;
    int* ele_edg = NULL;

    int* edg_nod = NULL;

    int* pec_edg_idx = NULL;
    int pec_cnt = 0;

    // === nod_crdn.txt ===
    fp = fopen("C:/Users/owner/source/repos/333333/nod_crdn.txt", "r");
    if (!fp) { perror("nod_crdn.txt"); return 1; }
    if (fscanf(fp, "%d", &N0) != 1) { fprintf(stderr, "Failed to read node count\n"); fclose(fp); return 1; }
    nod_crdn = (double*)malloc(3 * N0 * sizeof(double));
    for (int i = 0; i < N0; i++) {
        if (fscanf(fp, "%lf %lf %lf", &nod_crdn[3 * i], &nod_crdn[3 * i + 1], &nod_crdn[3 * i + 2]) != 3) {
            fprintf(stderr, "Failed to read node %d\n", i);
            free(nod_crdn); fclose(fp); return 1;
        }
    }
    fclose(fp);

    // === edg_nod.txt ===
    fp = fopen("C:/Users/owner/source/repos/333333/edg_nod.txt", "r");
    if (!fp) { perror("edg_nod.txt"); return 1; }
    if (fscanf(fp, "%d", &N1) != 1) { fprintf(stderr, "Failed to read edge count\n"); fclose(fp); return 1; }
    edg_nod = (int*)malloc(2 * N1 * sizeof(int));
    for (int i = 0; i < N1; i++) {
        if (fscanf(fp, "%d %d", &edg_nod[2 * i], &edg_nod[2 * i + 1]) != 2) {
            fprintf(stderr, "Failed to read edge %d\n", i); free(edg_nod); fclose(fp); return 1;
        }
        edg_nod[2 * i] -= 1;
        edg_nod[2 * i + 1] -= 1;
    }
    fclose(fp);

    // === ele_edg.txt ===
    fp = fopen("C:/Users/owner/source/repos/333333/ele_edg.txt", "r");
    if (!fp) { perror("ele_edg.txt"); return 1; }
    if (fscanf(fp, "%d", &N3) != 1) { fprintf(stderr, "Failed to read element count\n"); fclose(fp); return 1; }
    ele_edg = (int*)malloc(6 * N3 * sizeof(int));
    for (int k = 0; k < N3; k++) {
        if (fscanf(fp, "%d %d %d %d %d %d", &ele_edg[6 * k], &ele_edg[6 * k + 1], &ele_edg[6 * k + 2], &ele_edg[6 * k + 3], &ele_edg[6 * k + 4], &ele_edg[6 * k + 5]) != 6) {
            fprintf(stderr, "Failed to read element %d\n", k); free(ele_edg); fclose(fp); return 1;
        }
        for (int a = 0; a < 6; a++) ele_edg[6 * k + a] -= 1;
    }
    fclose(fp);

    // === ele_nod.txt ===
    fp = fopen("C:/Users/owner/source/repos/333333/ele_nod.txt", "r");
    if (!fp) { perror("ele_nod.txt"); free(nod_crdn); return 1; }
    int N3_check;
    if (fscanf(fp, "%d", &N3_check) != 1) { fprintf(stderr, "Failed to read element count\n"); fclose(fp); free(nod_crdn); return 1; }
    if (N3_check != N3) { fprintf(stderr, "Element count mismatch!\n"); fclose(fp); return 1; }
    ele_nod = (int*)malloc(4 * N3 * sizeof(int));
    for (int k = 0; k < N3; k++) {
        if (fscanf(fp, "%d %d %d %d", &ele_nod[4 * k], &ele_nod[4 * k + 1], &ele_nod[4 * k + 2], &ele_nod[4 * k + 3]) != 4) {
            fprintf(stderr, "Failed to read element %d\n", k);
            free(ele_nod); free(nod_crdn); fclose(fp); return 1;
        }
        for (int a = 0; a < 4; a++) ele_nod[4 * k + a] -= 1;
    }
    fclose(fp);

    // === pec_edg_idx_set.txt ===
    fp = fopen("C:/Users/owner/source/repos/333333/pec_edg.txt", "r");
    if (!fp) { perror("pec_edg.txt"); return 1; }
    pec_edg_idx = (int*)malloc(MAX_PEC * sizeof(int));
    int idx;
    while (fscanf(fp, "%d", &idx) == 1) {
        pec_edg_idx[pec_cnt++] = idx - 1;
    }
    fclose(fp);

    // === global mass matrix(희소행렬) 구성 ===
    SparseEntry* S = (SparseEntry*)malloc(MAX_NNZ * sizeof(SparseEntry));
    int nnz = 0;

    double Xmat[4][4], invX[4][4], det;
    for (int elem = 0; elem < N3; elem++) {
        int* nodes = &ele_nod[4 * elem];
        for (int i = 0; i < 4; i++) {
            Xmat[0][i] = nod_crdn[3 * nodes[i] + 0];
            Xmat[1][i] = nod_crdn[3 * nodes[i] + 1];
            Xmat[2][i] = nod_crdn[3 * nodes[i] + 2];
            Xmat[3][i] = 1.0;
        }
        det_inv_4x4(Xmat, &det, invX);
        double vol = fabs(det) / 6.0;

        // grad(lambda_i): 4개 벡터 준비
        double vec_1[3], vec_2[3], vec_3[3], vec_4[3];
        for (int d = 0; d < 3; d++) {
            vec_1[d] = invX[0][d];
            vec_2[d] = invX[1][d];
            vec_3[d] = invX[2][d];
            vec_4[d] = invX[3][d];
        }
        double scale = 6.0 * vol / 120.0 * eps0;

        double locM[6][6];
        locM[0][0] = (2 * dot3(vec_2, vec_2) - dot3(vec_2, vec_1) - dot3(vec_1, vec_2) + 2 * dot3(vec_1, vec_1)) * scale;
        locM[0][1] = (2 * dot3(vec_2, vec_3) - dot3(vec_2, vec_1) - dot3(vec_1, vec_3) + dot3(vec_1, vec_1)) * scale;
        locM[0][2] = (2 * dot3(vec_2, vec_4) - dot3(vec_2, vec_1) - dot3(vec_1, vec_4) + dot3(vec_1, vec_1)) * scale;
        locM[0][3] = (dot3(vec_2, vec_3) - dot3(vec_2, vec_2) - 2 * dot3(vec_1, vec_3) + dot3(vec_1, vec_2)) * scale;
        locM[0][4] = (dot3(vec_2, vec_4) - dot3(vec_2, vec_2) - 2 * dot3(vec_1, vec_4) + dot3(vec_1, vec_2)) * scale;
        locM[0][5] = (dot3(vec_2, vec_4) - dot3(vec_2, vec_3) - dot3(vec_1, vec_4) + dot3(vec_1, vec_3)) * scale;

        locM[1][0] = locM[0][1];
        locM[1][1] = (2 * dot3(vec_3, vec_3) - dot3(vec_3, vec_1) - dot3(vec_1, vec_3) + 2 * dot3(vec_1, vec_1)) * scale;
        locM[1][2] = (2 * dot3(vec_3, vec_4) - dot3(vec_3, vec_1) - dot3(vec_1, vec_4) + dot3(vec_1, vec_1)) * scale;
        locM[1][3] = (dot3(vec_3, vec_3) - dot3(vec_3, vec_2) - dot3(vec_1, vec_3) + 2 * dot3(vec_1, vec_2)) * scale;
        locM[1][4] = (dot3(vec_3, vec_4) - dot3(vec_3, vec_2) - dot3(vec_1, vec_4) + 2 * dot3(vec_1, vec_2)) * scale;
        locM[1][5] = (dot3(vec_3, vec_4) - dot3(vec_3, vec_3) - 2 * dot3(vec_1, vec_4) + dot3(vec_1, vec_3)) * scale;

        locM[2][0] = locM[0][2];
        locM[2][1] = locM[1][2];
        locM[2][2] = (2 * dot3(vec_4, vec_4) - dot3(vec_4, vec_1) - dot3(vec_1, vec_4) + 2 * dot3(vec_1, vec_1)) * scale;
        locM[2][3] = (dot3(vec_4, vec_3) - dot3(vec_4, vec_2) - dot3(vec_1, vec_3) + dot3(vec_1, vec_2)) * scale;
        locM[2][4] = (dot3(vec_4, vec_4) - dot3(vec_4, vec_2) - dot3(vec_1, vec_4) + 2 * dot3(vec_1, vec_2)) * scale;
        locM[2][5] = (dot3(vec_4, vec_4) - dot3(vec_4, vec_3) - dot3(vec_1, vec_4) + 2 * dot3(vec_1, vec_3)) * scale;

        locM[3][0] = locM[0][3];
        locM[3][1] = locM[1][3];
        locM[3][2] = locM[2][3];
        locM[3][3] = (2 * dot3(vec_3, vec_3) - dot3(vec_3, vec_2) - dot3(vec_2, vec_3) + 2 * dot3(vec_2, vec_2)) * scale;
        locM[3][4] = (2 * dot3(vec_3, vec_4) - dot3(vec_3, vec_2) - dot3(vec_2, vec_4) + dot3(vec_2, vec_2)) * scale;
        locM[3][5] = (dot3(vec_3, vec_4) - dot3(vec_3, vec_3) - 2 * dot3(vec_2, vec_4) + dot3(vec_2, vec_3)) * scale;

        locM[4][0] = locM[0][4];
        locM[4][1] = locM[1][4];
        locM[4][2] = locM[2][4];
        locM[4][3] = locM[3][4];
        locM[4][4] = (2 * dot3(vec_4, vec_4) - dot3(vec_4, vec_2) - dot3(vec_2, vec_4) + 2 * dot3(vec_2, vec_2)) * scale;
        locM[4][5] = (dot3(vec_4, vec_4) - dot3(vec_4, vec_3) - dot3(vec_2, vec_4) + 2 * dot3(vec_2, vec_3)) * scale;

        locM[5][0] = locM[0][5];
        locM[5][1] = locM[1][5];
        locM[5][2] = locM[2][5];
        locM[5][3] = locM[3][5];
        locM[5][4] = locM[4][5];
        locM[5][5] = (2 * dot3(vec_4, vec_4) - dot3(vec_4, vec_3) - dot3(vec_3, vec_4) + 2 * dot3(vec_3, vec_3)) * scale;

        // sparse matrix에 더하기
        for (int a = 0; a < 6; a++) {
            int global_i = ele_edg[6 * elem + a];
            if (is_PEC_edge(global_i, pec_edg_idx, pec_cnt)) continue;
            for (int b = 0; b < 6; b++) {
                int global_j = ele_edg[6 * elem + b];
                if (is_PEC_edge(global_j, pec_edg_idx, pec_cnt)) continue;
                add_sparse(S, &nnz, global_i, global_j, locM[a][b]);
            }
        }
    }

    // === 인덱스 재정렬 ===
    int* map_old2new = (int*)malloc(N1 * sizeof(int));
    int new_idx = 0;
    for (int i = 0; i < N1; i++) {
        if (is_PEC_edge(i, pec_edg_idx, pec_cnt))
            map_old2new[i] = -1;
        else
            map_old2new[i] = new_idx++;
    }
    int N1_new = new_idx;

    // === 재정렬된 sparse 저장 ===
    SparseEntry* S_new = (SparseEntry*)malloc(MAX_NNZ * sizeof(SparseEntry));
    int nnz_new = 0;
    for (int k = 0; k < nnz; k++) {
        int r = map_old2new[S[k].row];
        int c = map_old2new[S[k].col];
        if (r == -1 || c == -1) continue;
        S_new[nnz_new].row = r;
        S_new[nnz_new].col = c;
        S_new[nnz_new].value = S[k].value;
        nnz_new++;
    }

    // === 10x10 블록 프린트 ===
    printf("\nEps_mass_sp_mat (10x10 block, PEC제외:\n");
    for (int i = 0; i < 15 && i < N1_new; i++) {
        for (int j = 0; j < 15 && j < N1_new; j++) {
            double val = 0.0;
            for (int k = 0; k < nnz_new; k++) {
                if (S_new[k].row == i && S_new[k].col == j) { val = S_new[k].value; break; }
            }
            printf("%12.5e ", val ); // MATLAB과 같은 스케일
        }
        printf("\n");
    }
    printf("Nonzero nnz count (PEC 제외): %d\n", nnz_new);

    // 메모리 해제
    free(nod_crdn); free(ele_nod); free(ele_edg); free(edg_nod); free(pec_edg_idx); free(S); free(S_new); free(map_old2new);
    return 0;
}
